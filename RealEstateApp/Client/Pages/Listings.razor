@page "/"
@using RealEstateApp.Shared.Models
@inject Client.Services.ListingApiService ListingApiService


<PageTitle>RealeCOM</PageTitle>
<div class="topbar">
    <span class="brand">RealeCOM</span>
    <nav>
        <a href="/upload">Upload a listing</a>
    </nav>
</div>



<div class="listings-container">
    <h3>Property listings</h3>

    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!string.IsNullOrEmpty(loadError))
    {
        <p class="text-danger">@loadError</p>
    }
    else if (listings.Count == 0)
    {
        <p>No listings available</p>
    }
    else
    {
        <div class="listings-grid">
            @foreach (var listing in listings)
            {
                <a href="/listing/@listing.Id" class="listing-card">
                    <!-- Image placeholder -->
                    <div class="listing-image">
                        <img src="https://via.placeholder.com/400x250?text=Property" alt="Property image" />
                    </div>

                    <div class="listing-details">
                        <h4>@listing.Address</h4>
                        <p class="location">@listing.City, @listing.District, @listing.Country</p>

                        <p class="price">@listing.Price.ToString("C")</p>

                        <p class="meta">
                            <span>@listing.Bedrooms Bedrooms</span> •
                            <span>@listing.Bathrooms Bathrooms</span> •
                            <span>@listing.Area m²</span>
                        </p>

                        <p class="agent">Listed by @listing.NameLastName</p>
                    </div>
                </a>
            }
        </div>
    }
</div>


@code {
    private List<Listing> listings = new();
    private bool isLoading;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            listings = await ListingApiService.GetListingsAsync() ?? new List<Listing>();
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
