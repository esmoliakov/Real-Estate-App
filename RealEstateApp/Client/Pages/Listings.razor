@page "/"
@using RealEstateApp.Shared.Models
@inject Client.Services.ListingApiService ListingApiService


<PageTitle>RealeCOM</PageTitle>
<div class="topbar">
    <span class="brand">RealeCOM</span>
    <nav>
        <a href="/upload">Upload a listing</a>
    </nav>
</div>

<div class="search-filters">
    <h4>Filter Listings</h4>

    <div class="filter-row">
        <label>Type:</label>
        <select @bind="Filter.Type">
            <option value="">All</option>
            <option>Apartment</option>
            <option>House</option>
        </select>
    </div>

    <div class="filter-row">
        <label>Country:</label>
        <input type="text" @bind="Filter.Country" placeholder="Country"/>
    </div>

    <div class="filter-row">
        <label>City:</label>
        <input type="text" @bind="Filter.City" placeholder="City"/>
    </div>

    <div class="filter-row">
        <label>District:</label>
        <input type="text" @bind="Filter.District" placeholder="District"/>
    </div>

    <div class="filter-row">
        <label>Address:</label>
        <input type="text" @bind="Filter.Address" placeholder="Street or address"/>
    </div>

    <div class="filter-row">
        <label>Price:</label>
        <input type="number" @bind="Filter.MinPrice" placeholder="Min"/> -
        <input type="number" @bind="Filter.MaxPrice" placeholder="Max"/>
    </div>

    <div class="filter-row">
        <label>Area (m²):</label>
        <input type="number" @bind="Filter.MinArea" placeholder="Min"/> -
        <input type="number" @bind="Filter.MaxArea" placeholder="Max"/>
    </div>

    <div class="filter-row">
        <label>Bedrooms:</label>
        <input type="number" @bind="Filter.MinBedrooms" placeholder="Min"/> -
        <input type="number" @bind="Filter.MaxBedrooms" placeholder="Max"/>
    </div>

    <div class="filter-row">
        <label>Bathrooms:</label>
        <input type="number" @bind="Filter.MinBathrooms" placeholder="Min"/> -
        <input type="number" @bind="Filter.MaxBathrooms" placeholder="Max"/>
    </div>

    <button class="btn btn-primary" @onclick="ApplyFilter">Apply Filter</button>
</div>


<div class="listings-container">
    <h3>Property listings</h3>

    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (!string.IsNullOrEmpty(loadError))
    {
        <p class="text-danger">@loadError</p>
    }
    else if (filteredListings.Count == 0)
    {
        <p>No listings available</p>
    }
    else
    {
        <div class="listings-grid">
            @foreach (var listing in filteredListings)
            {
                <a href="/listing/@listing.Id" class="listing-card">
                    <!-- Image placeholder -->
                    <div class="listing-image">
                        <img src="https://via.placeholder.com/400x250?text=Property" alt="Property image" />
                    </div>

                    <div class="listing-details">
                        <h4>@listing.Address</h4>
                        <p class="location">@listing.City, @listing.District, @listing.Country</p>

                        <p class="price">@listing.Price.ToString("C")</p>

                        <p class="meta">
                            <span>@listing.Bedrooms Bedrooms</span> •
                            <span>@listing.Bathrooms Bathrooms</span> •
                            <span>@listing.Area m²</span>
                        </p>

                        <p class="agent">Listed by @listing.NameLastName</p>
                    </div>
                </a>
            }
        </div>
    }
</div>


@code {
    private List<Listing> listings = new();
    private List<Listing> filteredListings = new();
    private bool isLoading;
    private string? loadError;
    private ListingFilter Filter = new();

    // filter model
    private class ListingFilter
    {
        public string Type { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string District { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public decimal? MinPrice { get; set; }
        public decimal? MaxPrice { get; set; }
        public double? MinArea { get; set; }
        public double? MaxArea { get; set; }
        public int? MinBedrooms { get; set; }
        public int? MaxBedrooms { get; set; }
        public int? MinBathrooms { get; set; }
        public int? MaxBathrooms { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            listings = await ListingApiService.GetListingsAsync() ?? new List<Listing>();
            ApplyFilter(); // shows all listings initialy
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilter()
    {
        filteredListings = listings.Where(l =>
            (string.IsNullOrEmpty(Filter.Type) || l.Type.Equals(Filter.Type, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(Filter.Country) || l.Country.Contains(Filter.Country, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(Filter.City) || l.City.Contains(Filter.City, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(Filter.District) || l.District.Contains(Filter.District, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(Filter.Address) || l.Address.Contains(Filter.Address, StringComparison.OrdinalIgnoreCase)) &&
            (!Filter.MinPrice.HasValue || l.Price >= Filter.MinPrice.Value) &&
            (!Filter.MaxPrice.HasValue || l.Price <= Filter.MaxPrice.Value) &&
            (!Filter.MinArea.HasValue || l.Area >= Filter.MinArea.Value) &&
            (!Filter.MaxArea.HasValue || l.Area <= Filter.MaxArea.Value) &&
            (!Filter.MinBedrooms.HasValue || l.Bedrooms >= Filter.MinBedrooms.Value) &&
            (!Filter.MaxBedrooms.HasValue || l.Bedrooms <= Filter.MaxBedrooms.Value) &&
            (!Filter.MinBathrooms.HasValue || l.Bathrooms >= Filter.MinBathrooms.Value) &&
            (!Filter.MaxBathrooms.HasValue || l.Bathrooms <= Filter.MaxBathrooms.Value)
        ).ToList();
    }
}
